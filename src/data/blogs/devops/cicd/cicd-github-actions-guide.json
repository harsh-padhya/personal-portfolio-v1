{
  "id": "cicd-github-actions-guide",
  "title": "Complete CI/CD Pipeline with GitHub Actions",
  "category": "devops",
  "subcategory": "cicd",
  "tags": ["github-actions", "cicd", "automation", "deployment"],
  "publishDate": "2025-08-08T13:45:00.000Z",
  "lastModified": "2025-08-08T13:45:00.000Z",
  "readTime": "9 min read",
  "excerpt": "Build a complete CI/CD pipeline using GitHub Actions for automated testing, building, and deployment of your applications.",
  "content": "# Complete CI/CD Pipeline with GitHub Actions\n\nGitHub Actions has revolutionized how we approach continuous integration and deployment. This guide will walk you through creating a robust CI/CD pipeline that automatically tests, builds, and deploys your applications.\n\n## Understanding GitHub Actions\n\n### Core Concepts\n\n- **Workflows**: Automated procedures in your repository\n- **Events**: Triggers that start workflows (push, pull request, schedule)\n- **Jobs**: Groups of steps that execute on the same runner\n- **Steps**: Individual tasks within a job\n- **Actions**: Reusable units of code\n- **Runners**: Servers that execute your workflows\n\n## Basic Workflow Structure\n\n```yaml\n# .github/workflows/ci.yml\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Run tests\n      run: npm test\n```\n\n## Comprehensive Node.js Pipeline\n\n```yaml\nname: Node.js CI/CD\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  NODE_VERSION: '18'\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  # Job 1: Linting and Code Quality\n  lint:\n    name: Code Quality\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Run ESLint\n      run: npm run lint\n    \n    - name: Run Prettier\n      run: npm run format:check\n    \n    - name: Type checking\n      run: npm run type-check\n\n  # Job 2: Testing\n  test:\n    name: Test Suite\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [16, 18, 20]\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    \n    - name: Setup Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Run unit tests\n      run: npm run test:unit\n    \n    - name: Run integration tests\n      run: npm run test:integration\n    \n    - name: Generate coverage report\n      run: npm run test:coverage\n    \n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage/lcov.info\n        flags: unittests\n        name: codecov-umbrella\n\n  # Job 3: Security Scanning\n  security:\n    name: Security Scan\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Run security audit\n      run: npm audit --audit-level=high\n    \n    - name: Run Snyk security scan\n      uses: snyk/actions/node@master\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        args: --severity-threshold=high\n\n  # Job 4: Build\n  build:\n    name: Build Application\n    runs-on: ubuntu-latest\n    needs: [lint, test, security]\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Build application\n      run: npm run build\n    \n    - name: Upload build artifacts\n      uses: actions/upload-artifact@v3\n      with:\n        name: build-files\n        path: dist/\n        retention-days: 7\n\n  # Job 5: Docker Build and Push\n  docker:\n    name: Docker Build & Push\n    runs-on: ubuntu-latest\n    needs: build\n    if: github.event_name == 'push' && github.ref == 'refs/heads/main'\n    \n    permissions:\n      contents: read\n      packages: write\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n    \n    - name: Log in to Container Registry\n      uses: docker/login-action@v2\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    \n    - name: Extract metadata\n      id: meta\n      uses: docker/metadata-action@v4\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=sha\n          type=raw,value=latest,enable={{is_default_branch}}\n    \n    - name: Build and push Docker image\n      uses: docker/build-push-action@v4\n      with:\n        context: .\n        push: true\n        tags: ${{ steps.meta.outputs.tags }}\n        labels: ${{ steps.meta.outputs.labels }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n\n  # Job 6: Deploy to Staging\n  deploy-staging:\n    name: Deploy to Staging\n    runs-on: ubuntu-latest\n    needs: docker\n    if: github.ref == 'refs/heads/develop'\n    environment: staging\n    \n    steps:\n    - name: Deploy to staging\n      run: |\n        echo \"Deploying to staging environment\"\n        # Add your deployment commands here\n    \n    - name: Run smoke tests\n      run: |\n        echo \"Running smoke tests on staging\"\n        # Add smoke test commands\n\n  # Job 7: Deploy to Production\n  deploy-production:\n    name: Deploy to Production\n    runs-on: ubuntu-latest\n    needs: docker\n    if: github.ref == 'refs/heads/main'\n    environment: production\n    \n    steps:\n    - name: Deploy to production\n      run: |\n        echo \"Deploying to production environment\"\n        # Add your deployment commands here\n    \n    - name: Run smoke tests\n      run: |\n        echo \"Running smoke tests on production\"\n        # Add smoke test commands\n    \n    - name: Notify team\n      uses: 8398a7/action-slack@v3\n      with:\n        status: ${{ job.status }}\n        channel: '#deployments'\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n```\n\n## Advanced Patterns\n\n### Matrix Builds\n\n```yaml\nstrategy:\n  matrix:\n    os: [ubuntu-latest, windows-latest, macos-latest]\n    node-version: [14, 16, 18]\n    include:\n      - os: ubuntu-latest\n        node-version: 20\n    exclude:\n      - os: windows-latest\n        node-version: 14\n\nruns-on: ${{ matrix.os }}\n\nsteps:\n- name: Setup Node.js ${{ matrix.node-version }}\n  uses: actions/setup-node@v3\n  with:\n    node-version: ${{ matrix.node-version }}\n```\n\n### Conditional Execution\n\n```yaml\nsteps:\n- name: Deploy only on main branch\n  if: github.ref == 'refs/heads/main'\n  run: npm run deploy\n\n- name: Run integration tests on PR\n  if: github.event_name == 'pull_request'\n  run: npm run test:integration\n\n- name: Deploy on version tag\n  if: startsWith(github.ref, 'refs/tags/v')\n  run: npm run deploy:production\n```\n\n### Reusable Workflows\n\n```yaml\n# .github/workflows/reusable-test.yml\nname: Reusable Test Workflow\n\non:\n  workflow_call:\n    inputs:\n      node-version:\n        required: true\n        type: string\n      environment:\n        required: false\n        type: string\n        default: 'test'\n    secrets:\n      NPM_TOKEN:\n        required: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    environment: ${{ inputs.environment }}\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ inputs.node-version }}\n        registry-url: 'https://registry.npmjs.org'\n    \n    - name: Install dependencies\n      run: npm ci\n      env:\n        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n    \n    - name: Run tests\n      run: npm test\n```\n\n```yaml\n# .github/workflows/main.yml\nname: Main Workflow\n\non: [push, pull_request]\n\njobs:\n  call-test-workflow:\n    uses: ./.github/workflows/reusable-test.yml\n    with:\n      node-version: '18'\n      environment: 'staging'\n    secrets:\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\n\n## Environment Management\n\n### Environment Variables and Secrets\n\n```yaml\nenv:\n  # Workflow-level environment variables\n  NODE_ENV: production\n  API_URL: https://api.example.com\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: production\n    \n    env:\n      # Job-level environment variables\n      DEPLOY_ENV: production\n    \n    steps:\n    - name: Deploy with secrets\n      env:\n        # Step-level environment variables\n        DATABASE_URL: ${{ secrets.DATABASE_URL }}\n        API_KEY: ${{ secrets.API_KEY }}\n      run: |\n        echo \"Deploying to $DEPLOY_ENV\"\n        npm run deploy\n```\n\n### Dynamic Environment Variables\n\n```yaml\nsteps:\n- name: Set environment variables\n  run: |\n    echo \"BUILD_NUMBER=${{ github.run_number }}\" >> $GITHUB_ENV\n    echo \"COMMIT_SHA=${GITHUB_SHA::8}\" >> $GITHUB_ENV\n    echo \"BRANCH_NAME=${GITHUB_REF#refs/heads/}\" >> $GITHUB_ENV\n\n- name: Use environment variables\n  run: |\n    echo \"Build number: $BUILD_NUMBER\"\n    echo \"Commit SHA: $COMMIT_SHA\"\n    echo \"Branch: $BRANCH_NAME\"\n```\n\n## Deployment Strategies\n\n### Blue-Green Deployment\n\n```yaml\ndeploy-blue-green:\n  runs-on: ubuntu-latest\n  environment: production\n  \n  steps:\n  - name: Deploy to blue environment\n    run: |\n      # Deploy new version to blue environment\n      kubectl set image deployment/app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -n blue\n      kubectl rollout status deployment/app -n blue\n  \n  - name: Run health checks\n    run: |\n      # Health check on blue environment\n      curl -f http://blue.example.com/health\n  \n  - name: Switch traffic to blue\n    run: |\n      # Switch load balancer to blue\n      kubectl patch service app-service -p '{\"spec\":{\"selector\":{\"version\":\"blue\"}}}'\n  \n  - name: Cleanup green environment\n    run: |\n      # Optional: scale down green environment\n      kubectl scale deployment/app --replicas=0 -n green\n```\n\n### Canary Deployment\n\n```yaml\ncanary-deploy:\n  runs-on: ubuntu-latest\n  environment: production\n  \n  steps:\n  - name: Deploy canary (10% traffic)\n    run: |\n      kubectl set image deployment/app-canary app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\n      kubectl scale deployment/app-canary --replicas=1\n  \n  - name: Monitor canary metrics\n    run: |\n      # Monitor error rates, response times for 10 minutes\n      sleep 600\n      ERROR_RATE=$(curl -s http://monitoring.example.com/api/error-rate?service=app-canary)\n      if [ \"$ERROR_RATE\" -gt \"5\" ]; then\n        echo \"High error rate detected, rolling back\"\n        kubectl scale deployment/app-canary --replicas=0\n        exit 1\n      fi\n  \n  - name: Promote canary to production\n    run: |\n      # If monitoring passes, promote canary\n      kubectl set image deployment/app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\n      kubectl rollout status deployment/app\n      kubectl scale deployment/app-canary --replicas=0\n```\n\n## Performance Optimization\n\n### Caching Dependencies\n\n```yaml\nsteps:\n- name: Cache Node.js modules\n  uses: actions/cache@v3\n  with:\n    path: ~/.npm\n    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n    restore-keys: |\n      ${{ runner.os }}-node-\n\n- name: Cache Docker layers\n  uses: actions/cache@v3\n  with:\n    path: /tmp/.buildx-cache\n    key: ${{ runner.os }}-buildx-${{ github.sha }}\n    restore-keys: |\n      ${{ runner.os }}-buildx-\n```\n\n### Parallel Jobs\n\n```yaml\njobs:\n  test-unit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run unit tests\n        run: npm run test:unit\n  \n  test-integration:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run integration tests\n        run: npm run test:integration\n  \n  test-e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run E2E tests\n        run: npm run test:e2e\n  \n  build:\n    needs: [test-unit, test-integration, test-e2e]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Build application\n        run: npm run build\n```\n\n## Monitoring and Notifications\n\n### Slack Notifications\n\n```yaml\nsteps:\n- name: Notify success\n  if: success()\n  uses: 8398a7/action-slack@v3\n  with:\n    status: success\n    channel: '#deployments'\n    webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n    message: |\n      :white_check_mark: Deployment successful!\n      Branch: ${{ github.ref }}\n      Commit: ${{ github.sha }}\n      Author: ${{ github.actor }}\n\n- name: Notify failure\n  if: failure()\n  uses: 8398a7/action-slack@v3\n  with:\n    status: failure\n    channel: '#deployments'\n    webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n    message: |\n      :x: Deployment failed!\n      Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n```\n\n## Best Practices\n\n### Security\n\n1. **Use least privilege principle**\n2. **Store sensitive data in secrets**\n3. **Pin action versions**\n4. **Use OIDC for cloud deployments**\n5. **Scan for vulnerabilities**\n\n### Performance\n\n1. **Cache dependencies**\n2. **Use parallel jobs**\n3. **Optimize Docker builds**\n4. **Use self-hosted runners for heavy workloads**\n\n### Reliability\n\n1. **Implement proper error handling**\n2. **Use matrix builds for cross-platform testing**\n3. **Add health checks**\n4. **Implement rollback mechanisms**\n\n## Conclusion\n\nGitHub Actions provides powerful capabilities for building robust CI/CD pipelines. Start with basic workflows and gradually add complexity as your needs grow. Focus on reliability, security, and performance optimization to create pipelines that scale with your team and projects.\n\nRemember to regularly review and update your workflows, monitor their performance, and gather feedback from your team to continuously improve your CI/CD processes.",
  "featured": false,
  "difficulty": "intermediate",
  "status": "published",
  "author": "Alex Johnson"
}
